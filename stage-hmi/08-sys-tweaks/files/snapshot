#!/usr/bin/env python3

import os
import datetime
import subprocess

from hashlib import md5


def md5sum(filename):
    md5_hash = md5()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(128 * md5_hash.block_size), b""):
            md5_hash.update(chunk)
    return md5_hash.hexdigest()

copyright = """
Copyright (c) 2019, Stefano Bertelli
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the project.

"""

if __name__ == '__main__':
    print(copyright)
    print("Creating temporary folders")
    os.makedirs("/opt/1", exist_ok=True)
    os.makedirs("/opt/2", exist_ok=True)

    try:
        if os.path.exists('/opt/new.sqfs'):
            os.unlink('/opt/new.sqfs')
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    print("Generating image for changes")
    try:
        result = subprocess.call([
            '/usr/bin/mksquashfs',
            '/rw/upper',
            '/opt/new.sqfs'
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    print("Mounting image with changes to folder 1")
    try:
        result = subprocess.call([
            'mount',
            '-t',
            'squashfs',
            '/opt/new.sqfs',
            '/opt/1'
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))
    print(os.listdir("/opt/1"))

    print("Creating new squash overlay fs with rsync")
    try:
        result = subprocess.call([
            'rsync',
            '-aAXHvp',
            '/squash/',
            '/opt/2',
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    print("Creating new squash overlay fs with rsync")
    try:
        result = subprocess.call([
            'rsync',
            '-aAXHvp',
            '/opt/1/',
            '/opt/2',
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    print("Generating final merged squashfs file")
    base_name = datetime.datetime.now().isoformat()
    sqfs_path = os.path.join("/persist",  "{}.sqfs".format(base_name))
    md5_path = os.path.join("/persist",  "{}.md5".format(base_name))

    try:
        result = subprocess.call([
            'mksquashfs',
            '/opt/2',
            sqfs_path,
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    print("Removing 2 Final Folder")
    try:
        result = subprocess.call([
            'rm',
            '-R',
            '/opt/2'
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    print("Unmounting 1 Updates Folder")
    try:
        result = subprocess.call([
            'umount',
            '/opt/1'
        ])
    except Exception as e:
        print("Error: {}".format(e.__str__()))

    # Store the md5 of the current file in the designated path
    print("Generating checksum for consistency check at boot")
    file_checksum = md5sum(sqfs_path)
    print("Checksum: {}".format(file_checksum))
    open(md5_path, 'w').write(file_checksum)
